# =============================================================================
# GitHub Actions Reusable Workflow: Build NPM Packages
# =============================================================================
# This workflow handles NPM package building, linting, testing, and packing.
# It can be called from other workflows as a reusable job template.
# Uses pnpm package manager.
# Compatible with both Windows and Linux runners.
# =============================================================================

name: Build NPM Packages

on:
  workflow_call:
    inputs:
      # Directory containing the NPM project
      rootDirectory:
        description: "Root directory of the NPM project"
        required: false
        type: string
        default: "."

      # Enable/disable code linting and license checks
      lint:
        description: "Run linting and license validation"
        required: false
        type: boolean
        default: true

      # Enable/disable unit tests execution
      test:
        description: "Run unit tests"
        required: false
        type: boolean
        default: true

      # Enable/disable NPM package creation
      pack:
        description: "Create NPM package tarball"
        required: false
        type: boolean
        default: false

      # Runner operating system
      runsOn:
        description: "Runner OS (ubuntu-latest, windows-latest, etc.)"
        required: false
        type: string
        default: "ubuntu-latest"

jobs:
  build_npm:
    name: "NPM: Build & Pack"
    runs-on: ${{ inputs.runsOn }}

    # Environment variables consumed from build_semver job
    env:
      VERSION_CORE: ${{ needs.build_semver.outputs.VERSION_CORE }}
      VERSION_SEMVER: ${{ needs.build_semver.outputs.VERSION_SEMVER }}
      VERSION_FULLSEMVER: ${{ needs.build_semver.outputs.VERSION_FULLSEMVER }}
      VERSION_SHA: ${{ needs.build_semver.outputs.VERSION_SHA }}
      VERSION_SHORTSHA: ${{ needs.build_semver.outputs.VERSION_SHORTSHA }}

    steps:
      # -----------------------------------------------------------------------
      # Step 1: Checkout Repository
      # -----------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------------------------------------------------
      # Step 2: Validate Semantic Version (Only if Packing)
      # -----------------------------------------------------------------------
      - name: Validate semantic version is set
        if: inputs.pack == true
        working-directory: ${{ inputs.rootDirectory }}
        shell: bash
        run: |
          if [ -z "$VERSION_CORE" ]; then
            echo "❌ ERROR: VERSION_CORE is not set"
            exit 1
          else
            echo "✅ VERSION_CORE is set to: $VERSION_CORE"
          fi

      # -----------------------------------------------------------------------
      # Step 3: Update Version in package.json (Only if Packing)
      # -----------------------------------------------------------------------
      - name: Update version in package.json
        if: inputs.pack == true
        working-directory: ${{ inputs.rootDirectory }}
        shell: bash
        run: |
          echo "📦 Updating version to: $VERSION_CORE"

          # Find all package.json files and update the version
          find . -name "package.json" -type f | while read -r packageJsonFile; do
            echo "Processing: $packageJsonFile"
            sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION_CORE\"/g" "$packageJsonFile"

            # Display updated version
            echo "Updated version:"
            grep "\"version\":" "$packageJsonFile" || true
          done

      # -----------------------------------------------------------------------
      # Step 4: Setup Node.js
      # -----------------------------------------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "${{ inputs.rootDirectory }}/.nvmrc"
          cache: "pnpm"
          cache-dependency-path: "${{ inputs.rootDirectory }}/pnpm-lock.yaml"

      # -----------------------------------------------------------------------
      # Step 5: Setup pnpm
      # -----------------------------------------------------------------------
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      # -----------------------------------------------------------------------
      # Step 6: Configure NPM Authentication (If .npmrc exists)
      # -----------------------------------------------------------------------
      - name: Configure NPM authentication
        if: hashFiles(format('{0}/.npmrc', inputs.rootDirectory)) != ''
        working-directory: ${{ inputs.rootDirectory }}
        shell: bash
        run: |
          if [ -f ".npmrc" ]; then
            echo "🔐 Configuring NPM authentication"
            if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
              echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
            fi
          fi

      # -----------------------------------------------------------------------
      # Step 7: Install Dependencies
      # -----------------------------------------------------------------------
      - name: Install dependencies
        working-directory: ${{ inputs.rootDirectory }}
        run: pnpm install --frozen-lockfile

      # -----------------------------------------------------------------------
      # Step 8: Check for License Violations (Only if Linting Enabled)
      # -----------------------------------------------------------------------
      - name: Check licenses of dependencies
        if: inputs.lint == true
        working-directory: ${{ inputs.rootDirectory }}
        run: pnpm run license:check

      # -----------------------------------------------------------------------
      # Step 9: Lint Code (Only if Linting Enabled)
      # -----------------------------------------------------------------------
      - name: Run linting
        if: inputs.lint == true
        working-directory: ${{ inputs.rootDirectory }}
        run: pnpm run lint

      # -----------------------------------------------------------------------
      # Step 10: Run Unit Tests (Only if Testing Enabled)
      # -----------------------------------------------------------------------
      - name: Run tests
        if: inputs.test == true
        working-directory: ${{ inputs.rootDirectory }}
        run: pnpm run test:all

      # -----------------------------------------------------------------------
      # Step 11: Build Project (Only if Packing Enabled)
      # -----------------------------------------------------------------------
      - name: Build project
        if: inputs.pack == true
        working-directory: ${{ inputs.rootDirectory }}
        run: pnpm run build

      # -----------------------------------------------------------------------
      # Step 12: Pack NPM Package (Only if Packing Enabled)
      # -----------------------------------------------------------------------
      - name: Pack NPM package
        if: inputs.pack == true
        working-directory: ${{ inputs.rootDirectory }}
        shell: bash
        run: |
          echo "📦 Creating NPM package tarball..."

          # Create packages directory
          mkdir -p "${{ github.workspace }}/packages"

          # Pack the package
          pnpm pack --pack-destination "${{ github.workspace }}/packages"

          echo "✅ Package created"

      # -----------------------------------------------------------------------
      # Step 13: List Created Packages
      # -----------------------------------------------------------------------
      - name: List created packages
        if: inputs.pack == true
        shell: bash
        run: |
          echo "=========================================="
          echo "📦 Created NPM Packages"
          echo "=========================================="
          ls -lh "${{ github.workspace }}/packages"
          echo "=========================================="

      # -----------------------------------------------------------------------
      # Step 14: Upload NPM Package as Pipeline Artifact
      # -----------------------------------------------------------------------
      - name: Upload NPM package as artifact
        if: inputs.pack == true
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-${{ runner.os }}
          path: ${{ github.workspace }}/packages/*.tgz
          retention-days: 90
          if-no-files-found: error
